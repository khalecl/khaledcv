<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PDF to Text Converter</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

```
    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding: 20px;
    }

    .container {
        max-width: 800px;
        margin: 0 auto;
        background: white;
        border-radius: 20px;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        overflow: hidden;
    }

    .header {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        color: white;
        padding: 30px 20px;
        text-align: center;
    }

    .header h1 {
        font-size: 2em;
        margin-bottom: 10px;
        font-weight: 700;
    }

    .header p {
        opacity: 0.9;
        font-size: 1.1em;
    }

    .content {
        padding: 30px 20px;
    }

    .upload-section {
        background: #f8f9ff;
        border: 2px dashed #4facfe;
        border-radius: 15px;
        padding: 40px 20px;
        text-align: center;
        margin-bottom: 30px;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .upload-section:hover {
        border-color: #00f2fe;
        background: #f0f4ff;
    }

    .upload-section.dragover {
        border-color: #00f2fe;
        background: #e6f3ff;
        transform: scale(1.02);
    }

    .upload-icon {
        font-size: 3em;
        margin-bottom: 20px;
        color: #4facfe;
    }

    .file-input {
        display: none;
    }

    .upload-btn {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        color: white;
        border: none;
        padding: 15px 30px;
        border-radius: 50px;
        font-size: 1.1em;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 5px 15px rgba(79, 172, 254, 0.3);
    }

    .upload-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(79, 172, 254, 0.4);
    }

    .progress-container {
        display: none;
        margin: 20px 0;
    }

    .progress-bar {
        width: 100%;
        height: 8px;
        background: #e0e7ff;
        border-radius: 4px;
        overflow: hidden;
    }

    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #4facfe, #00f2fe);
        width: 0%;
        transition: width 0.3s ease;
    }

    .progress-text {
        text-align: center;
        margin-top: 10px;
        color: #666;
        font-size: 0.9em;
    }

    .result-section {
        display: none;
        margin-top: 30px;
    }

    .result-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        flex-wrap: wrap;
        gap: 10px;
    }

    .result-title {
        font-size: 1.3em;
        font-weight: 600;
        color: #333;
    }

    .action-buttons {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .btn {
        padding: 10px 20px;
        border: none;
        border-radius: 25px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s ease;
        font-size: 0.9em;
    }

    .btn-primary {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        color: white;
        box-shadow: 0 3px 10px rgba(79, 172, 254, 0.3);
    }

    .btn-secondary {
        background: #f8f9fa;
        color: #333;
        border: 1px solid #ddd;
    }

    .btn:hover {
        transform: translateY(-1px);
    }

    .text-output {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 10px;
        padding: 20px;
        min-height: 200px;
        max-height: 400px;
        overflow-y: auto;
        font-family: 'Courier New', monospace;
        font-size: 0.9em;
        line-height: 1.6;
        white-space: pre-wrap;
        word-wrap: break-word;
    }

    .stats {
        background: #e6f3ff;
        padding: 15px;
        border-radius: 10px;
        margin-bottom: 15px;
        display: flex;
        justify-content: space-around;
        text-align: center;
        flex-wrap: wrap;
        gap: 10px;
    }

    .stat-item {
        flex: 1;
        min-width: 100px;
    }

    .stat-value {
        font-size: 1.5em;
        font-weight: bold;
        color: #4facfe;
    }

    .stat-label {
        font-size: 0.9em;
        color: #666;
        margin-top: 5px;
    }

    .error {
        background: #ffe6e6;
        color: #d63384;
        padding: 15px;
        border-radius: 10px;
        margin: 15px 0;
        text-align: center;
    }

    .success {
        background: #d4edda;
        color: #155724;
        padding: 15px;
        border-radius: 10px;
        margin: 15px 0;
        text-align: center;
    }

    @media (max-width: 480px) {
        .container {
            margin: 10px;
            border-radius: 15px;
        }
        
        .header {
            padding: 20px 15px;
        }
        
        .header h1 {
            font-size: 1.5em;
        }
        
        .content {
            padding: 20px 15px;
        }
        
        .upload-section {
            padding: 30px 15px;
        }
        
        .result-header {
            flex-direction: column;
            align-items: stretch;
        }
        
        .action-buttons {
            justify-content: center;
        }
        
        .stats {
            flex-direction: column;
        }
    }
</style>
```

</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìÑ PDF to Text Converter</h1>
            <p>Convert your PDF files to editable text instantly</p>
        </div>

```
    <div class="content">
        <div class="upload-section" id="uploadSection">
            <div class="upload-icon">üìÅ</div>
            <h3>Drop your PDF file here or click to browse</h3>
            <p style="margin: 15px 0; color: #666;">Supports PDF files up to 50MB</p>
            <input type="file" id="fileInput" class="file-input" accept=".pdf">
            <button class="upload-btn" onclick="document.getElementById('fileInput').click()">
                Choose PDF File
            </button>
        </div>

        <div class="progress-container" id="progressContainer">
            <div class="progress-bar">
                <div class="progress-fill" id="progressFill"></div>
            </div>
            <div class="progress-text" id="progressText">Processing...</div>
        </div>

        <div class="result-section" id="resultSection">
            <div class="stats" id="stats">
                <div class="stat-item">
                    <div class="stat-value" id="pageCount">0</div>
                    <div class="stat-label">Pages</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="wordCount">0</div>
                    <div class="stat-label">Words</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="charCount">0</div>
                    <div class="stat-label">Characters</div>
                </div>
            </div>

            <div class="result-header">
                <h3 class="result-title">Extracted Text</h3>
                <div class="action-buttons">
                    <button class="btn btn-primary" onclick="downloadText()">Download .txt</button>
                    <button class="btn btn-secondary" onclick="copyText()">Copy to Clipboard</button>
                    <button class="btn btn-secondary" onclick="clearResults()">Clear</button>
                </div>
            </div>
            
            <div class="text-output" id="textOutput"></div>
        </div>
    </div>
</div>

<script>
    // Initialize PDF.js with proper worker
    pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';
    
    // Disable worker if there are issues (fallback)
    if (typeof Worker === 'undefined') {
        pdfjsLib.disableWorker = true;
    }

    let extractedText = '';
    let fileName = '';

    // File input handling
    document.getElementById('fileInput').addEventListener('change', handleFile);

    // Drag and drop handling
    const uploadSection = document.getElementById('uploadSection');

    uploadSection.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadSection.classList.add('dragover');
    });

    uploadSection.addEventListener('dragleave', (e) => {
        e.preventDefault();
        uploadSection.classList.remove('dragover');
    });

    uploadSection.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadSection.classList.remove('dragover');
        
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            handleFileUpload(files[0]);
        }
    });

    function handleFile(event) {
        const file = event.target.files[0];
        if (file) {
            handleFileUpload(file);
        }
    }

    function handleFileUpload(file) {
        // Validate file type
        if (file.type !== 'application/pdf') {
            showError('Please select a valid PDF file.');
            return;
        }

        // Validate file size (50MB limit)
        if (file.size > 50 * 1024 * 1024) {
            showError('File size must be less than 50MB.');
            return;
        }

        fileName = file.name.replace('.pdf', '');
        showProgress();
        convertPdfToText(file);
    }

    async function convertPdfToText(file) {
        try {
            const arrayBuffer = await file.arrayBuffer();
            
            // Load PDF with additional options to prevent worker issues
            const loadingTask = pdfjsLib.getDocument({
                data: arrayBuffer,
                useWorkerFetch: false,
                isEvalSupported: false,
                useSystemFonts: true
            });
            
            const pdf = await loadingTask.promise;
            
            const totalPages = pdf.numPages;
            updateProgress(0, `Processing page 1 of ${totalPages}...`);
            
            let fullText = '';
            
            for (let pageNum = 1; pageNum <= totalPages; pageNum++) {
                const page = await pdf.getPage(pageNum);
                const textContent = await page.getTextContent();
                
                let pageText = '';
                textContent.items.forEach(item => {
                    if (item.str && item.str.trim()) {
                        pageText += item.str + ' ';
                    }
                });
                
                if (pageText.trim()) {
                    fullText += `--- Page ${pageNum} ---\n${pageText.trim()}\n\n`;
                }
                
                const progress = (pageNum / totalPages) * 100;
                updateProgress(progress, `Processing page ${pageNum} of ${totalPages}...`);
                
                // Add small delay to prevent blocking UI
                await new Promise(resolve => setTimeout(resolve, 10));
            }
            
            extractedText = fullText.trim();
            
            if (!extractedText) {
                showError('No text found in PDF. The file might contain only images or be password-protected.');
                hideProgress();
                return;
            }
            
            displayResults();
            
        } catch (error) {
            console.error('Error converting PDF:', error);
            let errorMessage = 'Failed to convert PDF. ';
            
            if (error.name === 'PasswordException') {
                errorMessage += 'The PDF is password-protected.';
            } else if (error.name === 'InvalidPDFException') {
                errorMessage += 'The PDF file is corrupted or invalid.';
            } else if (error.name === 'MissingPDFException') {
                errorMessage += 'The PDF file could not be found or read.';
            } else {
                errorMessage += 'Please try with a different PDF file.';
            }
            
            showError(errorMessage);
            hideProgress();
        }
    }

    function showProgress() {
        document.getElementById('progressContainer').style.display = 'block';
        document.getElementById('resultSection').style.display = 'none';
        clearError();
    }

    function hideProgress() {
        document.getElementById('progressContainer').style.display = 'none';
    }

    function updateProgress(percentage, text) {
        document.getElementById('progressFill').style.width = percentage + '%';
        document.getElementById('progressText').textContent = text;
    }

    function displayResults() {
        hideProgress();
        
        const words = extractedText.split(/\s+/).filter(word => word.length > 0).length;
        const chars = extractedText.length;
        const pages = (extractedText.match(/--- Page \d+ ---/g) || []).length;
        
        document.getElementById('pageCount').textContent = pages;
        document.getElementById('wordCount').textContent = words.toLocaleString();
        document.getElementById('charCount').textContent = chars.toLocaleString();
        
        document.getElementById('textOutput').textContent = extractedText;
        document.getElementById('resultSection').style.display = 'block';
        
        showSuccess('PDF converted successfully!');
    }

    function downloadText() {
        if (!extractedText) {
            showError('No text to download. Please convert a PDF first.');
            return;
        }
        
        try {
            // Create blob with UTF-8 encoding
            const blob = new Blob([extractedText], { 
                type: 'text/plain;charset=utf-8' 
            });
            
            // Create download link
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `${fileName || 'converted-pdf'}.txt`;
            a.style.display = 'none';
            
            // Add to DOM, click, and remove
            document.body.appendChild(a);
            
            // Force click event
            if (a.click) {
                a.click();
            } else {
                // Fallback for older browsers
                const event = new MouseEvent('click', {
                    bubbles: true,
                    cancelable: true,
                    view: window
                });
                a.dispatchEvent(event);
            }
            
            // Cleanup
            setTimeout(() => {
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            }, 100);
            
            showSuccess('Text file download started!');
            
        } catch (error) {
            console.error('Download error:', error);
            showError('Download failed. Please try copying the text instead.');
        }
    }

    async function copyText() {
        if (!extractedText) return;
        
        try {
            await navigator.clipboard.writeText(extractedText);
            showSuccess('Text copied to clipboard!');
        } catch (error) {
            // Fallback for older browsers
            const textArea = document.createElement('textarea');
            textArea.value = extractedText;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            showSuccess('Text copied to clipboard!');
        }
    }

    function clearResults() {
        extractedText = '';
        fileName = '';
        document.getElementById('resultSection').style.display = 'none';
        document.getElementById('fileInput').value = '';
        clearError();
        clearSuccess();
    }

    function showError(message) {
        clearSuccess();
        const existingError = document.querySelector('.error');
        if (existingError) {
            existingError.remove();
        }
        
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error';
        errorDiv.textContent = message;
        document.querySelector('.content').insertBefore(errorDiv, document.getElementById('progressContainer'));
    }

    function showSuccess(message) {
        clearError();
        const existingSuccess = document.querySelector('.success');
        if (existingSuccess) {
            existingSuccess.remove();
        }
        
        const successDiv = document.createElement('div');
        successDiv.className = 'success';
        successDiv.textContent = message;
        document.querySelector('.content').insertBefore(successDiv, document.getElementById('progressContainer'));
        
        setTimeout(() => {
            if (successDiv.parentNode) {
                successDiv.remove();
            }
        }, 3000);
    }

    function clearError() {
        const error = document.querySelector('.error');
        if (error) error.remove();
    }

    function clearSuccess() {
        const success = document.querySelector('.success');
        if (success) success.remove();
    }
</script>
```

</body>
</html>